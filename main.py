import asyncio
import logging
import sys
import sqlite3
import datetime  # –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å datetime
from aiogram.fsm.storage.memory import MemoryStorage
import config
import os
from aiogram.types import InputFile
from aiogram import F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types
from app.handlers import router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import subprocess
from datetime import datetime, timedelta
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É pip freeze –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ requirements.txt
"""def generate_requirements():
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª requirements.txt –¥–ª—è –∑–∞–ø–∏—Å–∏
        with open('requirements.txt', 'w') as f:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É pip freeze –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            subprocess.run(['pip', 'freeze'], stdout=f)
        print("–§–∞–π–ª requirements.txt —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ requirements.txt: {e}")
"""
# –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler("bot.log"),  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
            logging.StreamHandler()  # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    logger = logging.getLogger(__name__)

def update_last_activity(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    current_time = datetime.datetime.now().isoformat()
    cursor.execute("UPDATE profiles SET last_activity = ? WHERE user_id = ?", (current_time, user_id))
    conn.commit()
    conn.close()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è


async def main() -> None:
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ target_gender, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE profiles ADD COLUMN target_gender TEXT")
    except sqlite3.OperationalError:
        pass

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ last_activity, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE profiles ADD COLUMN last_activity TEXT")
    except sqlite3.OperationalError:
        pass

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ username, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE profiles ADD COLUMN username TEXT")
    except sqlite3.OperationalError:
        pass

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ message_count, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        cursor.execute("ALTER TABLE profiles ADD COLUMN message_count INTEGER DEFAULT 0")
    except sqlite3.OperationalError:
        pass

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""CREATE TABLE IF NOT EXISTS profiles (
        user_id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        age INTEGER NOT NULL,
        gender TEXT NOT NULL,
        description TEXT,
        photo_id TEXT,
        target_gender TEXT,  -- –ü–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        last_activity TEXT,  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        username TEXT  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è username
    )""")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    cursor.execute("""CREATE TABLE IF NOT EXISTS likes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        liked_user_id INTEGER NOT NULL,
        mutual BOOLEAN DEFAULT FALSE,
        FOREIGN KEY (user_id) REFERENCES profiles (user_id),
        FOREIGN KEY (liked_user_id) REFERENCES profiles (user_id)
    )""")

    # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∞–π–∫–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    cursor.execute("DELETE FROM likes")
    conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.close()   # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    dp.include_router(router)

    # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ user_id
    ADMINS = [839693861, 302808230]

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async def is_admin(user_id: int) -> bool:
        return user_id in ADMINS

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /db –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    @dp.message(Command(commands=["db"]))
    async def send_db_file(message: types.Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if await is_admin(user_id):
            try:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db_file_path = "users.db"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                db_file = FSInputFile(db_file_path)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await message.answer_document(db_file)
                await message.answer("üìåüìåüìå–í–æ—Ç –≤–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∞–¥–º–∏–Ω! üòâ")
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(filename='bot.log', level=logging.INFO)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    async def is_admin(user_id):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–≤
        return user_id in ADMINS

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    @router.message(Command(commands=["logs"]))
    async def send_logs_command(message: types.Message):
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if await is_admin(user_id):
            try:
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
                log_file_path = "bot.log"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                log_file = FSInputFile(log_file_path)  # –°–æ–∑–¥–∞–µ–º FSInputFile

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await message.answer_document(log_file)
                await message.answer("üìåüìåüìå–í–æ—Ç –≤–∞—à–∏ –ª–æ–≥–∏, –∞–¥–º–∏–Ω! üòâ")
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /command
    @router.message(Command("command"))
    async def command_handler(message: types.Message):
        if message.from_user.id in ADMINS:
            commands_list = (
                "/logs - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏\n"
                "/db - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n"
                "/text - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                "/notext - –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                "/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞\n"
                "/nobroadcast - –æ—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            )
            await message.answer(f"–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{commands_list}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    @router.message(Command("stats"))
    async def stats_handler(message: types.Message):
        if message.from_user.id in ADMINS:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
            conn = sqlite3.connect("users.db")

            cursor = conn.cursor()

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(*) FROM profiles")
            total_users = cursor.fetchone()[0]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            now = datetime.now()
            day_ago = now - timedelta(days=1)
            week_ago = now - timedelta(weeks=1)
            month_ago = now - timedelta(weeks=4)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            day_ago_str = day_ago.strftime("%Y-%m-%d %H:%M:%S")
            week_ago_str = week_ago.strftime("%Y-%m-%d %H:%M:%S")
            month_ago_str = month_ago.strftime("%Y-%m-%d %H:%M:%S")

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            cursor.execute("SELECT COUNT(*) FROM profiles WHERE last_activity >= ?", (day_ago_str,))
            active_users_day = cursor.fetchone()[0]

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            cursor.execute("SELECT COUNT(*) FROM profiles WHERE last_activity >= ?", (week_ago_str,))
            active_users_week = cursor.fetchone()[0]

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            cursor.execute("SELECT COUNT(*) FROM profiles WHERE last_activity >= ?", (month_ago_str,))
            active_users_month = cursor.fetchone()[0]

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
            cursor.execute("SELECT SUM(message_count) FROM profiles")
            total_messages = cursor.fetchone()[0] or 0  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π

            # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT AVG(age) FROM profiles")
            avg_age = cursor.fetchone()[0] or 0  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–æ–≤
            avg_age_range = f"{int(avg_age) - 5}-{int(avg_age) + 5} –ª–µ—Ç" if avg_age > 0 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"day_ago: {day_ago_str}, week_ago: {week_ago_str}, month_ago: {month_ago_str}")
            print(f"Active users day: {active_users_day}, week: {active_users_week}, month: {active_users_month}")
            print(
                f"Messages day: total: {total_messages}")

            # –í—Ä–µ–º—è –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            cursor.execute(
                "SELECT strftime('%H:00', last_activity) AS hour, COUNT(*) FROM profiles GROUP BY hour ORDER BY COUNT(*) DESC LIMIT 1"
            )
            result = cursor.fetchone()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º peak_activity_time
            peak_activity_time = result[0] + ":00" if result else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            conn.close()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            stats_message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –¥–µ–Ω—å): {active_users_day}\n"
                f"üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –Ω–µ–¥–µ–ª—é): {active_users_week}\n"
                f"üü¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –º–µ—Å—è—Ü): {active_users_month}\n"
                f"‚úâÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏\—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã —Å—á–µ—Ç—á–∏–∫ —Å–º—Å —Å–±—Ä–∞—Å—ã–≤–µ—Ç—Å—è): {total_messages}\n"
                f"üë§ –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {avg_age_range}\n"
                f"‚è∞ –í—Ä–µ–º—è –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {peak_activity_time}\n"
            )

            await message.answer(stats_message)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
