import logging
from aiogram.fsm.context import FSMContext
from aiogram import Bot, types, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
import app.keyboards as kb
import config
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from app.keyboards import edit_or_delete_keyboard
from app.keyboards import after_registration_keyboard
from aiogram.types import ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.exceptions import TelegramForbiddenError
from config import ADMINS
from database.create import SAVE_FORM
from database.queries import *
from database.connection import connection
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()

from app.keyboards import update_buttons_after_dislike  # –ò–º–ø–æ—Ä—Ç –¥–∏–∑–ª–∞–π–∫–∞... –ò–Ω–∞—á–µ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–ª

#conn = await connection()
#cursor = conn.cursor()
router = Router()
bot = Bot(token=os.getenv('BOT_TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))



async def update_message_count(user_id: int):
    conn = await connection()
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await conn.execute(UPDATE_MESSAGE_COUNT, user_id)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await conn.close()


async def update_last_activity(user_id):
    conn = await connection()
    current_time = datetime.now().isoformat()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    await conn.execute(UPDATE_LAST_ACTIVITY, current_time, user_id)
    await conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö


async def get_user_info(user_id):
    conn = await connection()
    result = await conn.fetchrow(GET_USER_INFO, user_id)
    #result = conn.fetchone()
    if result:
        return {
            'name': result[0],
            'age': result[1],
            'description': result[2],
            'photo_id': result[3]
        }
    return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω


async def reset_likes(user_id):
    conn = await connection()

    # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª
    await conn.execute(DELETE_SELF_LIKE, user_id)

    # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–Ω–∫–µ—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await conn.execute(DELETE_SEND_LIKE, user_id)

    await conn.close()


# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_target_gender = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞, –∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç
    waiting_for_photo = State()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —á—É–¥–æ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º –æ–±–ª–∏—á—å–µ! ü§© –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤. –ù–∞–∂–º–∏—Ç–µ '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø', —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É!",
        reply_markup=await kb.start_keyboard()
    )
    await message.answer(
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–∂–µ –ª—é–±–æ–≤—å! ‚ù§Ô∏è "
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏ –µ—Å–ª–∏ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ–≤–ø–∞–¥—É—Ç, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
    )


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø"
@router.message(lambda message: message.text == "–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø")
async def cmd_register(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)
    await reset_likes(user_id)     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∞–π–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã

    await state.set_state(RegistrationStates.waiting_for_gender)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª? –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=await kb.gender_keyboard())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(username=username)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    gender = message.text.strip()
    if gender in ["–ú", "–ñ"]:
        await state.update_data(gender=gender)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(RegistrationStates.waiting_for_age)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 80!",
            reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏—à–∏
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ú' –∏–ª–∏ '–ñ'.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    if message.text.isdigit():
        age = int(message.text)
        if 12 <= age <= 80:
            await state.update_data(age=age)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.set_state(RegistrationStates.waiting_for_name)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        else:
            await message.answer(
                "–û–π-–æ–π! ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 80). –ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π—Ç–µ –º–µ–Ω—è! üòÑ")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 80). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    name = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –Ω–µ –ø—É—Å—Ç–æ–µ
        await state.update_data(name=name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(RegistrationStates.waiting_for_description)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å! üôå –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∞–Ω–∫–µ—Ç–µ. –ß–µ–º –≤—ã —É–≤–ª–µ–∫–∞–µ—Ç–µ—Å—å? –ö–∞–∫–æ–≤—ã –≤–∞—à–∏ –º–µ—á—Ç—ã?")
    else:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è.")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(RegistrationStates.waiting_for_description)
async def process_description(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    description = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    if description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
        await state.update_data(description=description)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(RegistrationStates.waiting_for_target_gender)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ: –º—É–∂—á–∏–Ω—É (–ú) –∏–ª–∏ –∂–µ–Ω—â–∏–Ω—É (–ñ):",
                             reply_markup=await kb.target_gender_keyboard())
    else:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ —Å–µ–±–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å
@router.message(RegistrationStates.waiting_for_target_gender)
async def process_target_gender(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    target_gender = message.text.strip()
    if target_gender in ["–ú", "–ñ"]:
        await state.update_data(target_gender=target_gender)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–≥–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await state.set_state(RegistrationStates.waiting_for_photo)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! üéâ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
                             reply_markup=types.ReplyKeyboardRemove())  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏—à–∏
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ú' –∏–ª–∏ '–ñ'.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@router.message(RegistrationStates.waiting_for_photo, F.photo)
async def process_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = await connection()
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º @username
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await conn.execute(
        SAVE_FORM,
            user_id,
            data['name'],
            data['age'],
            data['gender'],
            data['description'],
            photo_id,
            data['target_gender'],
            username
    )
    await conn.close()

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    await bot.send_photo(
        chat_id=user_id,
        photo=photo_id,
        caption=(f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∞–Ω–∫–µ—Ç—É:\n\n–ò–º—è: {data['name']}\n"
                 f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n–ü–æ–ª: {data['gender']}\n"
                 f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                 f"–ò—â–µ—Ç: {data['target_gender']}\n"
                 f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"),
        reply_markup=await kb.after_registration_keyboard()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥–æ—Ä–æ–¥–µ
    additional_message = (
        "‚ùóÔ∏è‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≥–æ—Ä–æ–¥ –ù–ï —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, "
        "–ø–æ—Å–∫–æ–ª—å–∫—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–æ–¥–µ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä. "
        "–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –ø–æ–∏—Å–∫–µ –∞–Ω–∫–µ—Ç –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä–µ –∏ –∏—â–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ —Å —ç—Ç–æ–≥–æ –∂–µ –≥–æ—Ä–æ–¥–∞. ‚ùóÔ∏è‚ùóÔ∏è\n\n"
        "‚ùì‚ùì –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ - –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ—Ç –∏ –¥–ª—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞. ‚ùì‚ùì\n\n"
        "‚úÖ –≠—Ç–∞ –∏ –≤—Å—è –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –Ω–∞—à–µ–º telegram-–∫–∞–Ω–∞–ª–µ. ‚úÖ"
    )

    await message.answer(additional_message)

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

#import random


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class PrivateMessageState(StatesGroup):
    waiting_for_username = State()
    waiting_for_message_text = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–ø—Ä–∏–º–µ—Ä)
async def get_user_id_by_username(username):
    conn = await connection()
    result = await conn.fetchrow(GET_ID_BY_USERNAME, username)
    await conn.close()
    return result[0] if result else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /text –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
@router.message(Command("text"))
async def private_message_command(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /notext –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        await state.set_state(PrivateMessageState.waiting_for_username)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notext –¥–ª—è –æ—Ç–º–µ–Ω—ã
@router.message(Command("notext"), PrivateMessageState.waiting_for_username)
async def cancel_private_message_command(message: types.Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è @username
@router.message(PrivateMessageState.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    username = message.text.strip()
    if not username.startswith("@"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
        return

    user_id = await get_user_id_by_username(username[1:])  # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª '@'
    if user_id:
        await state.update_data(user_id=user_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º user_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /notext –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(PrivateMessageState.waiting_for_message_text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    else:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /notext –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ
@router.message(PrivateMessageState.waiting_for_message_text)
async def process_message_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")

    if user_id:
        if message.photo:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
            photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
            caption = message.caption if message.caption else "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            full_caption = f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {caption}"
            try:
                await bot.send_photo(user_id, photo=photo_id, caption=full_caption)
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ: {e}")
        else:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = message.text.strip()
            full_message = f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message_text}"
            try:
                await bot.send_message(user_id, full_message)
                await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /broadcast
class BroadcastState(StatesGroup):
    waiting_for_message = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_all_user_ids():
    conn = await connection()
    user_ids = await conn.fetch()
    #user_ids = [row[0] for row in conn.fetchall()]
    return user_ids


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_user_profile(user_id):
    conn = await connection()
    await conn.execute(DELETE_FORM, user_id)
    await conn.close()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@router.message(Command("broadcast"))
async def broadcast_command(message: types.Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /nobroadcast –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        await state.set_state(BroadcastState.waiting_for_message)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nobroadcast –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Command("nobroadcast"), BroadcastState.waiting_for_message)
async def cancel_broadcast_command(message: types.Message, state: FSMContext):
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(BroadcastState.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    broadcast_text = message.text if message.text else ""

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = await get_all_user_ids()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids:
        try:
            if message.photo:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
                photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ
                caption = message.caption if message.caption else broadcast_text
                await bot.send_photo(user_id, photo=photo_id, caption=caption)
            else:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(user_id, broadcast_text)
        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            await delete_user_profile(user_id)  # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫"
@router.message(lambda message: message.text == "üîç–ü–æ–∏—Å–∫")
async def cmd_search(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_message_count(user_id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    conn = await connection()
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    viewed_profiles = data.get("viewed_profiles", [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await conn.fetchrow(GET_USER_DATA, user_id)
    #user = cursor.fetchone()

    if user is None:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")
        return

    user_gender = user[0]  # –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_gender = user[1]  # –ü–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç
    user_age = user[2]  # –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω ¬±5 –ª–µ—Ç
    max_age = user_age + 5
    min_age = user_age - 5

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑
    one_week_ago = datetime.now() - timedelta(weeks=2)
    one_week_ago_str = one_week_ago.strftime("%Y-%m-%d %H:%M:%S")

    # –ò—â–µ–º –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞ –∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    profile = await conn.fetchrow(
        SEARCH_FORMS.format(','.join(['%7'] * len(viewed_profiles)) if viewed_profiles else 'NULL'),
        user_id, target_gender, user_gender, min_age, max_age, one_week_ago_str, *viewed_profiles
    )
    #profile = cursor.fetchone()

    # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞
    if profile:
        profile_id = profile[0]

        # –î–æ–±–∞–≤–ª—è–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
        viewed_profiles.append(profile_id)
        await state.update_data(viewed_profiles=viewed_profiles)

        last_activity = profile[7] if profile[7] else "–ù–∏–∫–æ–≥–¥–∞"  # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(
            chat_id=user_id,
            photo=profile[5],  # photo_id
            caption=(f"üëã {profile[1]}\n"  # –∏–º—è
                     f"üíï {profile[2]}\n"  # –≤–æ–∑—Ä–∞—Å—Ç
                     f"üìù {profile[4]}\n"),
            reply_markup=await kb.like_dislike_buttons(profile[0], profile[7])  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∞–Ω–∫–µ—Ç—ã –≤ callback_data
        )
    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ (–æ—á–∏—â–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã)
        await state.update_data(viewed_profiles=[])
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–∞–∂–º–∏—Ç–µ 'üîç–ü–æ–∏—Å–∫', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω–æ–≤–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞
@router.callback_query(lambda call: call.data.startswith("like_"))
async def process_like_callback(call: types.CallbackQuery):
    liked_user_id = int(call.data.split("_")[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫
    liked_username = call.data.split("_")[2]
    user_id = call.from_user.id
    user_name = call.from_user.username

    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    conn = await connection()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ
    existing_like = await conn.fetchrow(CHECK_LIKE, user_id, liked_user_id)
    #existing_like = cursor.fetchone()

    if not existing_like:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await conn.execute(SAVE_LIKE,
                       user_id, liked_user_id, user_name, liked_username)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏–ª –ª–∏ –ª–∞–π–∫ –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        mutual_like = await conn.fetchrow(CHECK_LIKE, liked_user_id, user_id)
        #mutual_like = cursor.fetchone()

        if mutual_like:
            # –ï—Å–ª–∏ –ª–∞–π–∫ –≤–∑–∞–∏–º–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_info = get_user_info(user_id)  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
            liked_user_info = get_user_info(liked_user_id)  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª –ª–∞–π–∫

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
            mutual_message = (
                f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n\n"
                f"üëã {user_info['name']}, {user_info['age']}\n"
                f"üìù {user_info['description']}\n\n"
                f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: @{user_name}"
            )
            await bot.send_photo(
                liked_user_id, photo=user_info['photo_id'], caption=mutual_message
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
            mutual_message_for_first_user = (
                f"–£ –≤–∞—Å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è\n\n"
                f"üëã {liked_user_info['name']}, {liked_user_info['age']}\n"
                f"üìù {liked_user_info['description']}\n\n"
                f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: @{liked_username}"
            )
            await bot.send_photo(
                user_id, photo=liked_user_info['photo_id'], caption=mutual_message_for_first_user
            )

        else:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è
            await call.message.edit_reply_markup(reply_markup=None)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–º—É—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ –ª–∞–π–∫–µ –∏ –∞–Ω–∫–µ—Ç–æ–π
            user_info = get_user_info(user_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            like_message = (
                f"‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è –û–π-—ë... –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ª–∞–π–∫! –û—Ü–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç.\n\n"
                f"üëã {user_info['name']}\n"
                f"üíï {user_info['age']}\n"
                f"üìù {user_info['description']}\n"
            )
            await bot.send_photo(
                liked_user_id, photo=user_info['photo_id'],
                caption=like_message,
                reply_markup=await kb.like_dislike_buttons(user_id, user_name)
            )


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –ª–∞–π–∫ –±—ã–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω
        await call.message.answer("‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!")
    else:
        await call.message.answer("–í—ã —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")

        # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫
        await call.message.edit_reply_markup(reply_markup=None)

 # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∏—Å–∫"
    await call.message.answer("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ 'üîç–ü–æ–∏—Å–∫'.")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∂–∞–ª–æ–±—ã
class ComplaintState(StatesGroup):
    waiting_for_complaint_text = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è"
@router.callback_query(lambda call: call.data.startswith("report_"))
async def process_report_callback(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    report_user_id = int(call.data.split("_")[1])  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É—é—Ç—Å—è

    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.edit_reply_markup(reply_markup=None)

    # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–µ–º —Å–æ—Å—Ç–æ–∏—Ç –∂–∞–ª–æ–±–∞? –ú–æ–∂–µ—Ç –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è, –æ—Å–∫–æ—Ä–±–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à—É –∂–∞–ª–æ–±—É —Å—Ä–∞–∑—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –æ–Ω –ø—Ä–∏–º–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ä—ã.",
        reply_markup=ReplyKeyboardRemove())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É—é—Ç—Å—è, –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    await state.update_data(report_user_id=report_user_id)
    await state.set_state(ComplaintState.waiting_for_complaint_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∂–∞–ª–æ–±—ã
@router.message(ComplaintState.waiting_for_complaint_text)
async def process_complaint_text(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    report_user_id = user_data['report_user_id']  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É—é—Ç—Å—è
    complaint_text = message.text  # –¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_last_activity(message.from_user.id)

    conn = await connection()
    # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–∞–ª—É—é—Ç—Å—è
    reported_user = await conn.fetchrow(
        REPORTED_USER,
        report_user_id)
    #reported_user = cursor.fetchone()

    if reported_user:
        reported_name, reported_username, gender, age, description, photo_id, target_gender = reported_user
        # –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∞–π–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        like_info = await conn.fetchrow(LIKE_INFO,
                       report_user_id)
        #like_info = cursor.fetchone()

        if like_info:
            liked_user_id, liked_name = like_info[1], like_info[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º liked_user_id –∏ liked_name
        else:
            liked_user_id = liked_name = None  # –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∞–π–∫–∞—Ö

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        report_message = (
            f"üìåüìåüìå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø–æ–∂–∞–ª–æ–≤–∞–ª—Å—è –Ω–∞ @{reported_username}:\n\n"
            f"üë§ –ò–º—è: {reported_name}\n"
            f"üî¢ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
            f"üöª –ü–æ–ª: {gender}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üíñ –¶–µ–ª–µ–≤–æ–π –ø–æ–ª: {target_gender}\n\n"
            f"üìå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {report_user_id}\n"
            f"üì∏ –§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {photo_id}\n"  # photo_id –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            f"üí¨ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫: {liked_user_id}\n"
            f"üíñ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫: {liked_name}\n"
            f"–¢–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã: {complaint_text}\n"
        )

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        for admin_id in config.ADMINS:
            if photo_id:
                await bot.send_photo(admin_id, photo=photo_id, caption=report_message)
            else:
                await bot.send_message(admin_id, report_message)

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
        await message.answer("üì¨üì¨üì¨–ñ–∞–ª–æ–±–∞ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫" –∏ "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"
        from app.keyboards import after_registration_keyboard
        await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=await after_registration_keyboard())
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

 # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∏—Å–∫"
    await message.answer("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ 'üîç–ü–æ–∏—Å–∫'.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∏–∑–ª–∞–π–∫"
@router.callback_query(lambda call: call.data.startswith("dislike_"))
async def process_dislike_callback(call: types.CallbackQuery):
    disliked_user_id = int(call.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    liked_name = call.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await update_last_activity(call.from_user.id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await call.message.answer("üëéüëéüëé –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –î–∏–∑–ª–∞–π–∫!")

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await call.message.edit_reply_markup(reply_markup=None)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫–Ω–æ–ø–∫–µ "–ü–æ–∏—Å–∫"
    await call.message.answer("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–º–∏—Ç–µ 'üîç–ü–æ–∏—Å–∫'.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback-–∑–∞–ø—Ä–æ—Å
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–æ—è –∞–Ω–∫–µ—Ç–∞"
@router.message(lambda message: message.text == "üìë–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def cmd_my_profile(message: types.Message):
    user_id = message.from_user.id

    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)
    conn = await connection()
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    profile = await conn.fetchrow(FORM_INFO, user_id)
    #profile = cursor.fetchone()
    await conn.close()
    if profile:
        name, age, description, gender, target_gender, photo_id = profile

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await message.answer_photo(
            photo=photo_id,
            caption=f"üë§ –ò–º—è: {name}\n"
                    f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üîπ –ü–æ–ª: {gender}\n"
                    f"üî∏ –ò—â–µ—Ç: {target_gender}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É? –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ '‚Ü™Ô∏è–ù–∞–∑–∞–¥' –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –∞–Ω–∫–µ—Ç!",
                             reply_markup=await edit_or_delete_keyboard())
    else:
        await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!", reply_markup=await kb.start_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(lambda message: message.text == "‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def cmd_edit_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await reset_likes(user_id)     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∞–π–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–Ω–∫–µ—Ç—ã
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    await state.set_state(RegistrationStates.waiting_for_gender)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞. –ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ú"), KeyboardButton(text="–ñ")]],
        resize_keyboard=True
    ))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@router.message(lambda message: message.text == "‚úÇÔ∏è–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def cmd_delete_profile(message: types.Message):
    user_id = message.from_user.id
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)
    conn = await connection()

    await conn.execute(DELETE_FORM, user_id)
    await conn.close()
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.",
                         reply_markup=await kb.start_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(lambda message: message.text == "‚Ü™Ô∏è–ù–∞–∑–∞–¥")
async def cmd_back_to_search(message: types.Message):
    user_id = message.from_user.id
    await update_last_activity(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await update_message_count(user_id)

    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø–æ–∏—Å–∫—É –∞–Ω–∫–µ—Ç. –ù–∞–∂–º–∏—Ç–µ 'üîç–ü–æ–∏—Å–∫', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.",
                         reply_markup=await after_registration_keyboard())


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
class ModeratorMessageState(StatesGroup):
    waiting_for_message = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=await after_registration_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
@router.message(lambda message: message.text == "üì©–ü–∏—Å—å–º–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
async def send_message_to_moderators(message: types.Message, state: FSMContext):
    await message.answer("üì¨üì¨üì¨–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º?")

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏
    await message.answer(" –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —è –≤—Å–µ –ø–µ—Ä–µ–¥–∞–º.", reply_markup=types.ReplyKeyboardRemove())

    await state.set_state(ModeratorMessageState.waiting_for_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(ModeratorMessageState.waiting_for_message)
async def process_moderator_message(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    ticket_number = user_data.get("ticket_number", 1)
    username = message.from_user.username or message.from_user.full_name

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Ñ–æ—Ç–æ)
    if message.photo:
        photo_id = message.photo[-1].file_id
        caption = message.caption if message.caption else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
        report_text = f"üìåüìåüìå–¢–∏–∫–µ—Ç {ticket_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {caption}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMINS:
            await bot.send_photo(admin_id, photo=photo_id, caption=report_text)
    else:
        report_text = f"üìåüìåüìå–¢–∏–∫–µ—Ç {ticket_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}: {message.text}"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMINS:
            await bot.send_message(admin_id, report_text)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–°–ø–∞—Å–∏–±–æ, —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª, –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —Ç–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞
    await state.update_data(ticket_number=ticket_number + 1)
    await state.clear()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–±—Ä–∞—Ç–Ω–æ
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ü–æ–∏—Å–∫?", reply_markup=await after_registration_keyboard())